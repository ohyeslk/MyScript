// file: point-grm-standard.def
// version: 1.0
//
// Provides a rather open grammar that can be used to recognized math
// expressions.
// _____________________________________________________________________________

/*
quick reminder about the syntax supported by MkEquationGrammar

  . comments:
    . whole line comments starting with //, # or " sign (up to end of line) 
    . block comments delimited by /* */ (can be nested)
    . inline comments are not supported

  . terminal symbol definitions:
    . terminal_name = terminal_str
      . terminal_name is defined as: [-a-zA-Z_][-a-zA-Z_0-9]*
      . terminal_str is defined as: ( ( !EOL . )+ | EOL space+ )+
        . space is defined as ' ' | '\t'
        . EOL is defined as '\r\n' | '\n' | '\r'
    . terminal_ str is allowed to span multiple lines provided a "continuation
      line" starts with a space, which allows you to pretty format long terminal
      symbol definitions
   
  . rule definitions:
    . non_terminal_name ::= rule (| rule)?
      . non_terminal_name is defined as: [-a-zA-Z_][-a-zA-Z_0-9]*
      . supported rules are:
        . identity(source)
        . hpair(left, right)
        . fraction(numerator, denominator)
        . sqrt(source)
        . subscript(source, index)
        . superscript(source, exponent)
        . subsuperscript(source, index, exponent)
        . underscript(source, bottom)
        . overscript(source, top)
        . underoverscript(source, bottom, top)
      . rule continuations allow you to pretty format rule definitions by
        avoiding repeating target non_terminal_name

  . start symbol definition:
    . start(non_terminal_name)

apart from continuation lines, everything is pretty much space insensitive

*/

// terminal symbol definitions
symbol1 = A B C D E F G H I J K L M N O P Q R S T U V W X Y Z

// rule definitions
term ::= identity(symbol1)

// start symbol
start(term)
